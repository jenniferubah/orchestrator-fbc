#!/usr/bin/env bash

set -e

SKOPEO_CMD=${SKOPEO_CMD:-skopeo}
OPM_CMD=${OPM_CMD:-opm}
AUTH_FILE=${AUTH_FILE:-}

package_name="orchestrator-operator"

helpFunction()
{
  echo -e "Usage: $0\n"
  echo -e "\t--help:   see all commands of this script\n"
  echo -e "\t--init-basic <OCP_minor>:   initialize a new composite fragment\n\t  example: $0 --init-basic v4.13\n"
  echo -e "\t--init-basic-all:   initialize all the fragments from production\n\t  example: $0 --init-basic-all\n"
  echo -e "\t--comment-graph <OCP_minor> <stage|prod>:   add human readable bundle tags as comments to graph generated by --init-basic\n\t  example: $0 --comment-graph v4.13\n"
  echo -e "\t--render <OCP_minor> <stage|prod> : render one FBC fragment for specific environment (stage,prod)\n\t  example: $0 --render v4.13 -e stage brew\n"
  echo -e "\t--render-all <stage|prod>: render all the FBC fragments for specific environment (stage,prod)\n\t  example: $0 --render-all brew\n"
  exit 1
}

devfile()
{
    cat <<EOT > "$1"/devfile.yaml
schemaVersion: 2.2.0
metadata:
  name: fbc-$1
  displayName: FBC $1
  description: 'File based catalog'
  language: fbc
  provider: Red Hat
components:
  - name: image-build
    image:
      imageName: ""
      dockerfile:
        uri: catalog.Dockerfile
        buildContext: ""
  - name: kubernetes
    kubernetes:
      inlined: placeholder
    attributes:
      deployment/container-port: 50051
      deployment/cpuRequest: "100m"
      deployment/memoryRequest: 512Mi
      deployment/replicas: 1
      deployment/storageRequest: "0"
commands:
  - id: build-image
    apply:
      component: image-build
EOT
}

dockerfile()
{
  cat <<EOT > "$1"/catalog.Dockerfile
# The base image is expected to contain
# /bin/opm (with a serve subcommand) and /bin/grpc_health_probe
FROM registry.redhat.io/openshift4/ose-operator-registry:$1

ENTRYPOINT ["/bin/opm"]
CMD ["serve", "/configs", "--cache-dir=/tmp/cache"]

ADD catalog /configs
RUN ["/bin/opm", "serve", "/configs", "--cache-dir=/tmp/cache", "--cache-only"]

# Core bundle labels.

LABEL operators.operatorframework.io.bundle.mediatype.v1=registry+v1
LABEL operators.operatorframework.io.bundle.manifests.v1=manifests/
LABEL operators.operatorframework.io.bundle.metadata.v1=metadata/
LABEL operators.operatorframework.io.bundle.package.v1=orchestrator-operator
LABEL operators.operatorframework.io.bundle.channels.v1=alpha
LABEL operators.operatorframework.io.metrics.builder=operator-sdk-v1.32.0
LABEL operators.operatorframework.io.metrics.mediatype.v1=metrics+v1
LABEL operators.operatorframework.io.metrics.project_layout=go.kubebuilder.io/v3
LABEL operators.operatorframework.io.index.configs.v1=/configs

EOT
}




cmd="$1"
case $cmd in
  "--help")
    helpFunction
  ;;
  "--init-basic")
    frag=$2
    if [ -z "$frag" ]
    then
      echo "Please specify OCP minor, eg: v4.12"
      exit 1
    fi
    FROMV=$(grep FROM "${frag}"/catalog.Dockerfile)
    OCPV=${FROMV##*:}
    from=registry.redhat.io/redhat/redhat-operator-index:${OCPV}
    mkdir -p "${frag}/catalog/orchestrator-operator/" "${frag}/${frag}"
    touch "${frag}/${frag}/.empty"
    touch "${frag}"/graph.prod.yaml
    "${OPM_CMD}" render "$from" -o yaml | yq "select( .package == \"$package_name\" or .name == \"$package_name\")" | yq 'select(.schema == "olm.bundle") = {"schema": .schema, "image": .image}' | yq 'select(.schema == "olm.package") = {"schema": .schema, "name": .name, "defaultChannel": .defaultChannel}' > "${frag}"/graph.prod.yaml
    devfile "$frag"
    dockerfile "$frag"
    cp "${frag}"/graph.prod.yaml "${frag}"/graph.stage.yaml
  ;;
  "--init-basic-all")
    for f in ./"v4."*; do
      frag=${f#./}
      $0 --init-basic "${frag}"
      $0 --comment-graph "${frag}"
    done
  ;;
  "--render")
    frag=$2
    if [ -z "$frag" ]
    then
      echo "Please specify OCP minor, eg: v4.12"
      exit 1
    fi
    env=$3
    mkdir -p "${frag}/catalog/orchestrator-operator/" "${frag}/${frag}"
    touch "${frag}/${frag}/.empty"
    case $env in
      "stage" | "prod")
        "${OPM_CMD}" alpha render-template basic "${frag}"/graph."${env}".yaml -oyaml > "${frag}"/catalog/orchestrator-operator/catalog.yaml
      ;;
      *)
        echo "please specify if stage for staging or prod for production environments"
        exit 1
      ;;
    esac

  ;;
  "--render-all")
    env=$2
    for f in ./"v4."*; do
      frag=${f#./}
      "${OPM_CMD}" alpha render-template basic "${frag}"/graph."${env}".yaml -oyaml > "${frag}"/catalog/orchestrator-operator/catalog.yaml
    done
  ;;
  "--comment-graph")
    frag=$2
    if [ -z "$frag" ]
    then
      echo "Please specify OCP minor, eg: v4.12"
      exit 1
    fi
    env=$3
    sed -i "/# orchestrator-helm-operator v\.1\./d" "$frag"/graph."${env}".yaml
    grep -E "^image: [brew\.]*registry.redhat.io/rhtas-tech-preview/orchestrator-operator[-rhel9]*@sha256" "$frag"/graph."${env}".yaml | while read -r line ; do
      image=${line/image: /}
      echo "Processing $image"
      # shellcheck disable=SC2086
      url=$(${SKOPEO_CMD} inspect --no-tags ${AUTH_FILE} docker://"$image" | grep "\"url\": ")
      tag1=${url/*\/images\/}
      tag=${tag1/\",/}
      sed -i "s|$image|$image\n# orchestrator-bundle-registry $tag|g" "$frag"/graph."${env}".yaml
    done
  ;;
  "--comment-graph-all")
    env=$3
    for f in ./"v4."*; do
      frag=${f#./}
      sed -i "/# orchestrator-helm-operator v\.1\./d" "$frag"/graph."${env}".yaml
      grep -E "^image: registry.[stage\.]redhat.io/rhdh-orchestrator-dev-preview-beta/orchestrator-operator-bundle*@sha256" "$frag"/graph."${env}".yaml | while read -r line ; do
        image=${line/image: /}
        echo "Processing $image"
	# shellcheck disable=SC2086
        url=$(${SKOPEO_CMD} inspect --no-tags ${AUTH_FILE} docker://"$image" | grep "\"url\": ")
        tag1=${url/*\/images\/}
        tag=${tag1/\",/}
        sed -i "s|$image|$image\n# orchestrator-bundle-registry $tag|g" "$frag"/graph."${env}".yaml
      done
    done
  ;;
  *)
    echo "$cmd not one of the allowed flags"
    helpFunction
  ;;
esac